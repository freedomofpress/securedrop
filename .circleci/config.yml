---
common-steps:
  - &rebaseontarget
    run:
      name: Rebase on top of GitHub target branch
      command: ./devops/scripts/rebase-ci.sh

  - &installenchant
    run:
      name: Install enchant
      command: sudo apt-get update && sudo apt-get install -y enchant

  - &createcachedir
    run:
      name: Ensure cache dir exists and permissions are good
      command: |
        sudo mkdir -p /caches && sudo chown circleci: -R /caches

  - &restorecache
    restore_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/focal/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar.gz

  - &loadimagelayers
    run:
      name: Load image layer cache
      command: |
        set +o pipefail
        docker load -i /caches/layers.tar || true

  - &dockerimagebuild
    run:
      name: Build Docker images
      command: |
        set +o pipefail
        docker images
        fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
        cd securedrop && DOCKER_BUILD_VERBOSE=true DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" ./bin/dev-shell true

  - &saveimagelayers
    run:
      name: Save Docker image layer cache
      command: |
        docker images
        docker save -o /caches/layers.tar securedrop-test-focal-py3:latest

  - &savecache
    save_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/focal/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar

version: 2.1
orbs:
  slack: circleci/slack@4.4.4

slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - run:
        name: Slack - Skip from Forks
        command: |
          if [ -z "$SLACK_ACCESS_TOKEN" ]; then
            circleci-agent step halt
          fi
    - slack/notify:
        channel: C01EY9C1X45
        event: fail
        template: basic_fail_1

jobs:
  lint:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache
      - *installenchant

      - run:
          name: Run all linters
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "/opt/venvs/securedrop-app-code/bin/pip3 install --require-hashes -r requirements/python3/develop-requirements.txt && make -C .. lint"

      - run:
          name: Check that translation machine objects are reproducible
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "/opt/venvs/securedrop-app-code/bin/pip3 install --require-hashes -r requirements/python3/develop-requirements.txt && make -C .. verify-mo"

  app-tests:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    parallelism: 3
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            JOB_TESTFILES=$(cd securedrop; circleci tests glob 'tests/test*py' 'tests/{files,functional}/test*py')
            echo "JOB_TESTFILES: ${JOB_TESTFILES}"
            RUN_TESTFILES=$(echo "$JOB_TESTFILES" |circleci tests split --split-by=timings)
            echo "RUN_TESTFILES: ${RUN_TESTFILES}"
            export TESTFILES=$RUN_TESTFILES
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make test
          no_output_timeout: 15m

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  app-page-layout-tests:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    parallelism: 5
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            JOB_TESTFILES=$(cd securedrop; circleci tests glob 'tests/functional/pageslayout/test*py')
            echo "JOB_TESTFILES: ${JOB_TESTFILES}"
            RUN_TESTFILES=$(echo "$JOB_TESTFILES" |circleci tests split --split-by=timings)
            echo "RUN_TESTFILES: ${RUN_TESTFILES}"
            export TESTFILES=$RUN_TESTFILES
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make test
          no_output_timeout: 15m

      # Once HTML can be expected to validate, remove "|| true" and
      # "informational" status---in other words, fail if validation fails!
      - run:
          name: Validate HTML (informational)
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" \
              make validate-test-html || true

      - run:
          name: Validate accessibility (informational)
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" \
              make accessibility-summary || true

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  translation-tests:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    parallelism: 21
    steps:
      - run:
          name: Only run on translation pull requests
          command: |
            if [ "$CIRCLE_PR_USERNAME" != "weblate-fpf" ]; then
                circleci-agent step halt
            fi

      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            sudo apt update && sudo apt install python3-sh python3-babel
            NUM_SUPPORTED_LOCALES="$(make count-supported-locales)"
            [[ "$NUM_SUPPORTED_LOCALES" -eq "$CIRCLE_NODE_TOTAL" ]] || { echo "Parallelism (${CIRCLE_NODE_TOTAL} must equal the number of supported languages (${NUM_SUPPORTED_LOCALES})."; exit 1; }
            export LOCALES="$(make supported-locales | jq --raw-output 'join("\n")' | circleci tests split)"
            fromtag=$(docker images | grep securedrop-test-focal-py3 | head -n1 | awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make translation-test

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  admin-tests:
    docker:
      - image: debian:bullseye
    steps:
      - run: apt update && apt-get install -y make jq docker.io
      - checkout
      - setup_remote_docker
      - run:
          name: Run tests
          command: |
            cd admin; make test

  static-analysis-and-no-known-cves:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Check Python dependencies for CVEs
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "pip3 install -U -q --upgrade safety && make -C .. safety"

      - run:
          name: Run static security testing on source code with semgrep
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "pip3 install -U -q --upgrade pip && pip3 install -U -q --upgrade semgrep && make -C .. semgrep"

  staging-test-with-rebase:
    machine:
      image: ubuntu-2004:current
      enabled: true

    working_directory: ~/sd
    steps:
      - setup_remote_docker:
          version: "26.0.2"
      - run:
          command: |
            ssh remote-docker "sudo mkdir -p /etc/systemd/system/docker.service.d"
            cat \<< EOF ssh remote-docker "sudo tee -a /etc/systemd/system/docker.service.d/env.conf"
            {
            [Service]
            Environment="DOCKER_ENABLE_DEPRECATED_PULL_SCHEMA_1_IMAGE=true"
            }
            EOF
            ssh remote-docker "sudo systemctl daemon-reload"
            ssh remote-docker "sudo systemctl restart docker"
      - checkout
      - *rebaseontarget
      - *installenchant

      - run:
          name: Run Staging tests on GCE
          command: |
            make ci-go
          no_output_timeout: 35m

      - run:
          name: Ensure environment torn down
          # Always report true, since env should will destroyed already
          # if all tests passed.
          command: make ci-teardown || true
          when: always

      - store_test_results:
          path: ~/sd/junit

      - store_artifacts:
          path: ~/sd/junit

  deb-tests:
    machine:
      image: ubuntu-2004:current
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.24
      BASE_OS: focal
    steps:
      - checkout
      - run:
          name: Build debs
          command: |
            make build-debs
      - run:
          name: Build OSSEC debs
          command: |
            make build-debs-ossec
      - run:
          name: Second round of builds
          command: |
            # TODO: use reprotest in the future
            mv build/focal build/focal-first
            make build-debs-notest
            make build-debs-ossec-notest
            mv build/focal build/focal-second
      - run:
          name: Run diffoscope
          command: |
            sha256sum build/focal-*/*.deb
            # FIXME: securedrop-app-code isn't reproducible
            for pkg in ossec-agent ossec-server securedrop-config securedrop-keyring securedrop-ossec-agent securedrop-ossec-server
            do
                echo "Checking ${pkg}..."
                ./.venv/bin/diffoscope build/focal-first/${pkg}*.deb build/focal-second/${pkg}*.deb
            done

workflows:
  version: 2
  securedrop_ci:
    jobs:
      - lint:
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - app-tests:
          filters:
            branches:
              ignore:
                - /update-builder-.*/
          requires:
            - lint
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - app-page-layout-tests:
          filters:
            branches:
              ignore:
                - /update-builder-.*/
          requires:
            - lint
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - admin-tests:
          filters:
            branches:
              ignore:
                - /update-builder-.*/
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - static-analysis-and-no-known-cves:
          requires:
            - lint
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - staging-test-with-rebase:
          filters:
            branches:
              only: /(stg-|release\/).*/
          requires:
            - lint
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - translation-tests:
          requires:
            - lint
          context:
            - circleci-slack
          <<: *slack-fail-post-step
      - deb-tests:
          context:
            - circleci-slack
          <<: *slack-fail-post-step

  nightly:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - staging-test-with-rebase
      - static-analysis-and-no-known-cves

  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - develop
    jobs:
      - deb-tests
      - translation-tests
