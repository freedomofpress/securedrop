---
common-steps:
  - &rebaseontarget
    run:
      name: Rebase on top of GitHub target branch
      command: ./devops/scripts/rebase-ci.sh

  - &installenchant
    run:
      name: Install enchant
      command: sudo apt-get update && sudo apt-get install -y enchant

  - &createcachedir
    run:
      name: Ensure cache dir exists and permissions are good
      command: |
        sudo mkdir -p /caches && sudo chown circleci: -R /caches

  - &restorecache
    restore_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/xenial/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar.gz

  - &loadimagelayers
    run:
      name: Load image layer cache
      command: |
        set +o pipefail
        docker load -i /caches/layers.tar || true

  - &dockerimagebuild
    run:
      name: Build Docker images
      command: |
        set +o pipefail
        docker images
        fromtag=$(docker images |grep securedrop-test-xenial-py3 |head -n1 |awk '{print $2}')
        cd securedrop && DOCKER_BUILD_VERBOSE=true DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" ./bin/dev-shell true

  - &saveimagelayers
    run:
      name: Save Docker image layer cache
      command: |
        docker images
        docker save -o /caches/layers.tar securedrop-test-xenial-py3:latest

  - &savecache
    save_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/xenial/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar

version: 2
jobs:
  lint:
    machine:
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: xenial
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache
      - *installenchant

      - run:
          name: Run all linters but shellcheck
          command: |
            fromtag=$(docker images |grep securedrop-test-xenial-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" securedrop/bin/dev-shell bash -c "/opt/venvs/securedrop-app-code/bin/pip3 install --require-hashes -r requirements/python3/develop-requirements.txt && make -C .. ansible-config-lint app-lint docs-lint flake8 html-lint typelint yamllint"

      - run:
          name: Run shellcheck
          command: make shellcheck

  app-tests:
    machine:
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: xenial
    parallelism: 3
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^(i18n|docs|update-builder)")
            if [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            export TESTFILES=$(cd securedrop; circleci tests glob 'tests/test*py' 'tests/**/test*py' |circleci tests split --split-by=timings |xargs echo)
            fromtag=$(docker images |grep securedrop-test-xenial-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" make test
          no_output_timeout: 15m

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  translation-tests:
    machine:
      image: ubuntu-1604:201903-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: xenial
    parallelism: 20
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^i18n")
            if ! [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            sudo apt update && sudo apt install python-sh python-pybabel
            export LOCALE="$(/usr/bin/python2 securedrop/i18n_tool.py list-locales --lines | circleci tests split | tr '\n' ' ')"
            fromtag=$(docker images | grep securedrop-test-xenial-py3 | head -n1 | awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" make translation-test

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  admin-tests:
    docker:
      - image: gcr.io/cloud-builders/docker
    steps:
      - run: apt-get install -y make jq
      - checkout
      - setup_remote_docker
      - run:
          name: Run tests
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^(i18n|docs|update-builder)")
            if [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            cd admin; make test

  fetch-tor-debs:
    docker:
      - image: gcr.io/cloud-builders/docker
    steps:
      - run: apt-get install -y make virtualenv python3-pip enchant jq
      - checkout
      - setup_remote_docker
      - run:
          name: Fetch Tor packages
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^(i18n|docs|update-builder)")
            if [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            export LC_ALL="C.UTF-8"
            make fetch-tor-packages

  updater-gui-tests:
    docker:
      - image: circleci/python:3.5
    steps:
      - checkout

      - run:
          name: Install libqt5designer5
          command: sudo apt-get update && sudo apt-get install -y libqt5designer5

      - run:
          name: Install requirements
          command: |
            cd journalist_gui
            pipenv install

      - run:
          name: Run tests
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^(i18n|docs|update-builder)")
            if [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            cd journalist_gui
            xvfb-run -a pipenv run python3 test_gui.py

  static-analysis-and-no-known-cves:
    machine:
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: xenial
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Check Python dependencies for CVEs
          command: |
            fromtag=$(docker images |grep securedrop-test-xenial-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" securedrop/bin/dev-shell bash -c "sudo pip3 install -q --upgrade safety && make -C .. safety"

      - run:
          name: Run static security testing on source code
          command: |
            fromtag=$(docker images |grep securedrop-test-xenial-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-xenial-py3:${fromtag:-latest}" securedrop/bin/dev-shell bash -c "sudo pip3 install -q --upgrade pip && sudo pip3 install -q --upgrade bandit && make -C .. bandit"


  staging-test-with-rebase:
    machine:
      enabled: true

    working_directory: ~/sd
    steps:
      - checkout
      - *rebaseontarget
      - *installenchant

      - run:
          name: Run Staging tests on GCE
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^(i18n|docs)")
            if [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            make ci-go
          no_output_timeout: 35m

      - run:
          name: Ensure environment torn down
          # Always report true, since env should will destroyed already
          # if all tests passed.
          command: make ci-teardown || true
          when: always

      - store_test_results:
          path: ~/sd/junit

      - store_artifacts:
          path: ~/sd/junit

  deb-tests:
    docker:
      - image: gcr.io/cloud-builders/docker
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    steps:
      - run: apt-get install -y make virtualenv enchant jq python3-dev build-essential
      - checkout
      - setup_remote_docker
      - run:
          name: Test Debian package build
          command: |
            BRANCH_MATCH=$(devops/scripts/match-ci-branch.sh "^update-builder")
            if ! [[ $BRANCH_MATCH =~ ^found ]]; then echo "Skipping: ${BRANCH_MATCH}"; exit 0; fi
            make ci-deb-tests

  docs-linkcheck:
    docker:
      - image: circleci/python:3.5
    steps:
      - checkout
      - *rebaseontarget
      - *installenchant

      - run:
          name: Install development dependencies
          command: sudo pip3 install -U -r securedrop/requirements/python3/develop-requirements.txt

      - run:
          name: Run documentation linting
          command: make docs-lint && make docs-linkcheck

workflows:
  version: 2
  securedrop_ci:
    jobs:
      - lint
      - app-tests:
          filters:
            branches:
              ignore:
                - /docs-.*/
                - /i18n-.*/
                - /update-builder-.*/
          requires:
            - lint
      - admin-tests:
          filters:
            branches:
              ignore:
                - /docs-.*/
                - /i18n-.*/
                - /update-builder-.*/
          requires:
            - lint
      - updater-gui-tests:
          filters:
            branches:
              ignore:
                - /docs-.*/
                - /i18n-.*/
                - /update-builder-.*/
          requires:
            - lint
      - static-analysis-and-no-known-cves:
          requires:
            - lint
      - staging-test-with-rebase:
          filters:
            branches:
              ignore:
                - /docs-.*/
                - /i18n-.*/
          requires:
            - lint
      - translation-tests:
          requires:
            - lint
      - deb-tests:
          filters:
            branches:
              only:
                - /update-builder-.*/
          requires:
            - lint

  nightly:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - static-analysis-and-no-known-cves

  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - develop
    jobs:
      - deb-tests
      - translation-tests
      - docs-linkcheck
      - fetch-tor-debs
