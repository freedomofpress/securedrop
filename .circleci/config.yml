---
common-steps:
  - &rebaseontarget
    run:
      name: Rebase on top of GitHub target branch
      command: ./devops/scripts/rebase-ci.sh

  - &installenchant
    run:
      name: Install enchant
      command: sudo apt-get update && sudo apt-get install -y enchant

  - &createcachedir
    run:
      name: Ensure cache dir exists and permissions are good
      command: |
        sudo mkdir -p /caches && sudo chown circleci: -R /caches

  - &restorecache
    restore_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/focal/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar.gz

  - &loadimagelayers
    run:
      name: Load image layer cache
      command: |
        set +o pipefail
        docker load -i /caches/layers.tar || true

  - &dockerimagebuild
    run:
      name: Build Docker images
      command: |
        set +o pipefail
        docker images
        fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
        cd securedrop && DOCKER_BUILD_VERBOSE=true DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" ./bin/dev-shell true

  - &saveimagelayers
    run:
      name: Save Docker image layer cache
      command: |
        docker images
        docker save -o /caches/layers.tar securedrop-test-focal-py3:latest

  - &savecache
    save_cache:
      key: v1-sd-layers-{{ checksum "securedrop/dockerfiles/focal/python3/Dockerfile" }}
      paths:
        - /caches/layers.tar

version: 2
jobs:
  lint:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache
      - *installenchant

      - run:
          name: Run all linters
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "/opt/venvs/securedrop-app-code/bin/pip3 install --require-hashes -r requirements/python3/develop-requirements.txt && make -C .. lint"

  app-tests:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    parallelism: 3
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            JOB_TESTFILES=$(cd securedrop; circleci tests glob 'tests/test*py' 'tests/{files,functional}/test*py')
            echo "JOB_TESTFILES: ${JOB_TESTFILES}"
            RUN_TESTFILES=$(echo "$JOB_TESTFILES" |circleci tests split --split-by=timings)
            echo "RUN_TESTFILES: ${RUN_TESTFILES}"
            export TESTFILES=$RUN_TESTFILES
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make test
          no_output_timeout: 15m

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  app-page-layout-tests:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    parallelism: 5
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            JOB_TESTFILES=$(cd securedrop; circleci tests glob 'tests/functional/pageslayout/test*py')
            echo "JOB_TESTFILES: ${JOB_TESTFILES}"
            RUN_TESTFILES=$(echo "$JOB_TESTFILES" |circleci tests split --split-by=timings)
            echo "RUN_TESTFILES: ${RUN_TESTFILES}"
            export TESTFILES=$RUN_TESTFILES
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make test
          no_output_timeout: 15m

      # Once HTML can be expected to validate, remove "|| true" and
      # "informational" status---in other words, fail if validation fails!
      - run:
          name: Validate HTML (informational)
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" \
              make validate-test-html || true

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  translation-tests:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    parallelism: 21
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Run tests
          command: |
            sudo apt update && sudo apt install python3-sh python3-babel
            export LOCALES="$(/usr/bin/python3 securedrop/i18n_tool.py list-locales --lines | circleci tests split | tr '\n' ' ')"
            fromtag=$(docker images | grep securedrop-test-focal-py3 | head -n1 | awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make translation-test

      - store_test_results:
          path: ~/project/test-results

      - store_artifacts:
          path: ~/project/test-results

  admin-tests:
    docker:
      - image: debian:bullseye
    steps:
      - run: apt update && apt-get install -y make jq docker.io
      - checkout
      - setup_remote_docker
      - run:
          name: Run tests
          command: |
            cd admin; make test

  updater-gui-tests:
    docker:
      - image: debian:bullseye
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update && apt-get install -y libqt5designer5 python3-venv
            cd journalist_gui
            python3 -m venv .venv/ && source .venv/bin/activate
            pip install --require-hashes -r dev-requirements.txt
      - run:
          name: Run tests
          command: |
            cd journalist_gui
            source .venv/bin/activate
            QT_QPA_PLATFORM=offscreen python3 test_gui.py -v

  static-analysis-and-no-known-cves:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Check Python dependencies for CVEs
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "pip3 install -U -q --upgrade safety && make -C .. safety"

      - run:
          name: Run static security testing on source code with bandit
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "pip3 install -U -q --upgrade pip && pip3 install -U -q --upgrade bandit && make -C .. bandit"

      - run:
          name: Run static security testing on source code with semgrep
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" securedrop/bin/dev-shell \
                  bash -c "pip3 install -U -q --upgrade pip && pip3 install -U -q --upgrade semgrep && make -C .. semgrep"

  zap-vulnerability-scan:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true
    environment:
      DOCKER_API_VERSION: 1.23
      BASE_OS: focal
    parallelism: 3
    steps:
      - checkout
      - *rebaseontarget
      - *createcachedir
      - *restorecache
      - *loadimagelayers
      - *dockerimagebuild
      - *saveimagelayers
      - *savecache

      - run:
          name: Install dependencies
          command: |
            sudo systemctl stop apt-daily.service
            sudo systemctl kill --kill-who=all apt-daily.service
            while ! (systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)') do sleep 1; done
            ( sudo apt-get update || sudo apt-get update )
            sudo apt-get install -y openjdk-17-jre-headless wget firefox
            export GECKODRIVER_VER=v0.30.0
            wget https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VER}/geckodriver-${GECKODRIVER_VER}-linux64.tar.gz -O /tmp/geckodriver.tar.gz
            cd /tmp
            tar -xvzf geckodriver.tar.gz
            sudo install geckodriver /usr/local/bin
            wget https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2_11_1_unix.sh -O /tmp/zap_installer.sh
            chmod u+x /tmp/zap_installer.sh
            sudo /tmp/zap_installer.sh -q
            zap.sh -cmd -addoninstall jython
            cd ~/project; ls
            pip3 install -r scans/requirements.txt

      - run:
          name: Run dev instance
          command: |
            fromtag=$(docker images |grep securedrop-test-focal-py3 |head -n1 |awk '{print $2}')
            DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test-focal-py3:${fromtag:-latest}" make dev-detatched
          background: true

      - run:
          name: Run zap daemon
          command: zap.sh -daemon -port 8090 -config api.disablekey=true -config hud.enabled=false -config hud.enabledForDesktop=false
          background: true

      - run:
          name: Run zap
          command: python3 ~/project/scans/zapscan.py

      - store_test_results:
          path: ~/project/jrn_report.html

      - store_artifacts:
          path: ~/project/src_report.html

  staging-test-with-rebase:
    machine:
      image: ubuntu-2004:202010-01
      enabled: true

    working_directory: ~/sd
    steps:
      - checkout
      - *rebaseontarget
      - *installenchant

      - run:
          name: Run Staging tests on GCE
          command: |
            make ci-go
          no_output_timeout: 35m

      - run:
          name: Ensure environment torn down
          # Always report true, since env should will destroyed already
          # if all tests passed.
          command: make ci-teardown || true
          when: always

      - store_test_results:
          path: ~/sd/junit

      - store_artifacts:
          path: ~/sd/junit

  deb-tests:
    docker:
      - image: debian:bullseye
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    steps:
      - run: apt-get update && apt-get install -y git docker.io make virtualenv enchant-2 jq python3-dev build-essential rsync
      - checkout
      - setup_remote_docker
      - run:
          name: Test Debian package build
          command: |
            make ci-deb-tests

workflows:
  version: 2
  securedrop_ci:
    jobs:
      - lint
      - app-tests:
          filters:
            branches:
              ignore:
                - /i18n-.*/
                - /update-builder-.*/
          requires:
            - lint
      - app-page-layout-tests:
          filters:
            branches:
              ignore:
                - /i18n-.*/
                - /update-builder-.*/
          requires:
            - lint
      - admin-tests:
          filters:
            branches:
              ignore:
                - /i18n-.*/
                - /update-builder-.*/
      - updater-gui-tests:
          filters:
            branches:
              ignore:
                - /i18n-.*/
                - /update-builder-.*/
      - static-analysis-and-no-known-cves:
          requires:
            - lint
      - staging-test-with-rebase:
          filters:
            branches:
              # Ignore needs to be here explicitly as only clause introduced in PR #6086 might be removed afterwards.
              ignore: /i18n-.*/
              only: /(stg-|release\/).*/
          requires:
            - lint
      - translation-tests:
          requires:
            - lint
          filters:
            branches:
              only: /i18n-.*/
      - deb-tests:
          filters:
            branches:
              only:
                - /update-builder-.*/
          requires:
            - lint
      - zap-vulnerability-scan:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - /i18n-.*/
                - /update-builder-.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - staging-test-with-rebase
      - static-analysis-and-no-known-cves

  weekly:
    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - develop
    jobs:
      - deb-tests
      - translation-tests
