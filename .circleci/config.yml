---
version: 2
jobs:
  lint:
    docker:
      - image: gcr.io/cloud-builders/docker
    steps:
      - run: apt-get install -y make
      - checkout
      - run:
          name: Rebase on-top of github target
          command: ./devops/scripts/rebase-ci.sh
      - setup_remote_docker

      - run: TAG=${CIRCLE_SHA1} make ci-lint-image

      - run: TAG=${CIRCLE_SHA1} make ci-lint

  tests:
    docker:
      - image: gcr.io/cloud-builders/docker
    working_directory: /build
    environment:
      DOCKER_API_VERSION=1.23
    parallelism: 3
    steps:
      - run: apt-get install -y make
      - checkout
      - run:
          name: Rebase on-top of github target
          command: ./devops/scripts/rebase-ci.sh
      - setup_remote_docker

      - restore_cache:
          keys:
            - v1-sd-layers-{{ .Branch }}-
            - v1-sd-layers-
          paths:
            - /caches/layers.tar.gz

      - run:
          name: Load image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/layers.tar |true

      - run:
          name: Build Docker images
          command: |
            set +o pipefail
            docker images
            fromtag=$(docker images |grep securedrop-test |head -n1 |awk '{print $2}')
            cd securedrop && DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test:${fromtag:-latest}" ./bin/dev-shell true

      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker images
            docker save -o /caches/layers.tar securedrop-test:${CIRCLE_SHA1}

      - save_cache:
          key: v1-sd-layers-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/layers.tar

      - run: mkdir -p ~/test-results

      - run:
          name: Run tests
          command: |
            export TESTFILES=$(cd securedrop; circleci tests glob 'tests/test*py' 'tests/**/test*py' |circleci tests split --split-by=timings |xargs echo)
            docker rm -f securedrop-test || true
            fromtag=$(docker images |grep securedrop-test |head -n1 |awk '{print $2}')
            cd securedrop && DOCKER_RUN_ARGUMENTS=$(bash <(curl -s https://codecov.io/env)) DOCKER_BUILD_ARGUMENTS="--cache-from securedrop-test:${fromtag:-latest}" make test

      - run:
          name: Report results
          command: |
            docker cp securedrop-test:/tmp/test-results ~/
          when: always

      - store_test_results:
          path: ~/test-results

      - store_artifacts:
          path: ~/test-results

  admin-tests:
    docker:
      - image: gcr.io/cloud-builders/docker
    steps:
      - run: apt-get install -y make
      - checkout
      - setup_remote_docker
      - run: cd admin ; make test

  updater-gui-tests:
    docker:
      - image: circleci/python:3.5
    steps:
      - checkout

      - run:
          name: Install libqt5designer5
          command: sudo apt-get update && sudo apt-get install -y libqt5designer5

      - run:
          name: Install requirements
          command: |
            cd journalist_gui
            pipenv install

      - run:
          name: Run tests
          command: |
            cd journalist_gui
            xvfb-run pipenv run python3 test_gui.py

  staging-test-with-rebase:
    docker:
      - image: quay.io/freedomofpress/circleci-docker:latest
        environment:
          FPF_CI: true
          CI_SD_ENV: staging
          CI_AWS_TYPE: t2.medium
          FPF_GRSEC: false
          TEST_REPORTS: /root/sd
    working_directory: ~/sd

    steps:

      - checkout

      - run:
          name: Rebase on-top of github target
          command: ./devops/scripts/rebase-ci.sh

      - run:
          name: Installation apt pre-reqs
          command: apt-get install -y enchant

      - run:
          name: Installation pre-reqs
          command: pip install -U -r securedrop/requirements/develop-requirements.txt

      - run:
          name: Check Python dependencies for CVEs
          command: make safety

      - run:
          name: Run static security testing on source code
          command: make bandit

      - setup_remote_docker

      - run:
          name: Run Debian builds
          command: make build-debs

      - run:
          name: Provision staging servers and run tests
          command: make ci-go

      - run:
          name: Ensure environment torn down
          command: molecule destroy -s aws
          when: on_fail

      - run:
          name: Collect JUnit test result files
          command: ./devops/scripts/combine-junit-test-results.sh

      - store_test_results:
          path: /root/sd/junit

      - store_artifacts:
          path: /root/sd/junit

      - store_artifacts:
          path: /root/sd/raw-test-output

      - store_artifacts:
          path: /root/sd/.tor_version

workflows:
  version: 2
  securedrop_ci:
    jobs:
      - lint
      - tests
      - admin-tests
      - updater-gui-tests
      - staging-test-with-rebase:
          requires:
            - lint
            - updater-gui-tests
