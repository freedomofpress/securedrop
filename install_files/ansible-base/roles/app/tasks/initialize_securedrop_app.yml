---
- name: ensure secureDrop web application apt packages are installed
  apt: pkg="{{ item }}" state=latest
  with_items: app_deps

- name: copy the app gpg key from the admin host machine to the app server
  copy:
    src: "{{ securedrop_app_gpg_public_key }}"
    dest: "{{ securedrop_data }}/"

- name: import app gpg public key
  command: "su -s /bin/bash -c \"gpg --homedir {{ securedrop_data }}/keys --import {{ securedrop_data }}/{{ securedrop_app_gpg_public_key }}\" {{ securedrop_user }}"

  # only a config.py.example is included in the securedrop-app-code package. If
  # a config.py file is not already present copy the one installed by the
  # securedrop-app-code package. This was done so the securedrop-app-code
  # package would not overwrite the config.py on upgrades.
- stat: path="{{ securedrop_code }}/config.py"
  register: config

- name: if config.py does not exist copy example from the securedrop code root
  command: "cp {{ securedrop_code }}/config.py.example {{ securedrop_code }}/config.py"
  when: not config.stat.exists

- name: ensure config.py is owned by www-data
  file:
    dest: "{{ securedrop_code }}/config.py"
    owner: "{{ securedrop_user }}"
    group: "{{ securedrop_user }}"
    mode: 0600

# TODO: config.py.example is already written using Jinja2 format, and should be
# easy to template-ize. However, we cannot do this because when Ansible writes
# a template, it re-does the entire thing. This would cause a problem in the
# case where we want to re-provision a machine with an updated value (e.g. the
# application key fingerprint). Blindly overwriting the entire file would cause
# major problems. It would be nice to use templates here, assuming we find a
# way to selectively update the file.

# Note: we can also use register with with_items to cut down on repetition
# here. See
# http://docs.ansible.com/playbooks_loops.html#using-register-with-a-loop

- name: generating 32 byte value for "source secret key"
  shell: "head -c 32 /dev/urandom | base64"
  register: source_secret_key
  when: not config.stat.exists

- name: if source secret key is blank insert 32 byte random value
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "source_secret_key"
    line: "    SECRET_KEY = '{{ source_secret_key.stdout}}'"
  when: not config.stat.exists

- name: generating 32 byte value for "journalist secret key"
  shell: "head -c 32 /dev/urandom | base64"
  register: journalist_secret_key
  when: not config.stat.exists

- name: if journalist secret key is blank insert 32 byte random value
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "journalist_secret_key"
    line: "    SECRET_KEY = '{{ journalist_secret_key.stdout }}'"
  when: not config.stat.exists

- name: generating 32 byte value for "scrypt id pepper"
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_id_pepper
  when: not config.stat.exists

- name: if scrypt id pepper is blank insert 32 byte random value
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "scrypt_id_pepper"
    line: "SCRYPT_ID_PEPPER = '{{ scrypt_id_pepper.stdout }}'"
  when: not config.stat.exists

- name: generating 32 byte value for "scrypt gpg pepper"
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_gpg_pepper
  when: not config.stat.exists

- name: if scrypt gpg pepper is blank insert 32 byte random value
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "scrypt_gpg_pepper"
    line: "SCRYPT_GPG_PEPPER = '{{ scrypt_gpg_pepper.stdout }}'"
  when: not config.stat.exists

- name: verify application gpg fingerprint is defined in config.py
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "^JOURNALIST_KEY = "
    line: "JOURNALIST_KEY = '{{ securedrop_app_gpg_fingerprint }}'"

- stat: path="{{ securedrop_data }}/db.sqlite"
  register: db

- name: initialize sqlite db
  shell: "su -s /bin/bash -c \"PYTHONPATH={{ securedrop_code }} python -c 'import db; db.init_db()'\" {{ securedrop_user }}"
  when: not db.stat.exists

  # If using a custom header overwrite the existing one
  # dpkg will not override it on upgrades
  # otherwise will need to templatizing the apparmor profile
- name: if header file is not None replace the default logo
  copy:
    src: "{{ securedrop_header_image }}"
    dest: "{{ securedrop_code }}/static/i/logo.png"
    owner: "{{ securedrop_user }}"
    group: "{{ securedrop_user }}"
    mode: 400
    backup: yes
  when: securedrop_header_image != "None"

- name: compile language files
  shell: "{{ securedrop_repo }}/loc_tools.py compile"
