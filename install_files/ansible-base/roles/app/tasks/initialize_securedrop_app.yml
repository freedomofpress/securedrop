---
- name: Install SecureDrop Application Server dependencies.
  apt:
    pkg: "{{ item }}"
    state: latest
  with_items: "{{ appserver_dependencies }}"
  tags:
    - apt

- name: Copy the SecureDrop Application GPG public key to the Application Server.
  copy:
    src: "{{ securedrop_app_gpg_public_key }}"
    dest: "{{ securedrop_data }}/"
  tags:
    - securedrop_config

- name: Import the SecureDrop Application GPG public key to the Application Server keyring.
  # multiline format for command module, since this is a long command
  command: >
    su -s /bin/bash -c 'gpg
    --homedir {{ securedrop_data }}/keys
    --import {{ securedrop_data }}/{{ securedrop_app_gpg_public_key }}' {{ securedrop_user }}
  register: gpg_app_key_import
  changed_when: "'imported: 1' in gpg_app_key_import.stderr"
  tags:
    - gpg
    - securedrop_config

  # The securedrop-app-code apt package contains only 'config.py.example',
  # not 'config.py'. This was done so the securedrop-app-code
  # package would not overwrite the config.py on upgrades.
  # If 'config.py' exists, then the SecureDrop application
  # has already been configured, and most of the following tasks will be skipped.
- name: Check whether SecureDrop config.py file already exists.
  stat:
    path: "{{ securedrop_code }}/config.py"
  register: config
  # Read-only task, so don't report as changed.
  changed_when: false
  tags:
    - securedrop_config

- name: Copy starter config.py template if missing.
  command: cp {{ securedrop_code }}/config.py.example {{ securedrop_code }}/config.py
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Set ownership and permissions on config.py.
  file:
    dest: "{{ securedrop_code }}/config.py"
    owner: "{{ securedrop_user }}"
    group: "{{ securedrop_user }}"
    mode: "0600"
  tags:
    - permissions
    - securedrop_config

# TODO: config.py.example is already written using Jinja2 format, and should be
# easy to template-ize. However, we cannot do this because when Ansible writes
# a template, it re-does the entire thing. This would cause a problem in the
# case where we want to re-provision a machine with an updated value (e.g. the
# application key fingerprint). Blindly overwriting the entire file would cause
# major problems. It would be nice to use templates here, assuming we find a
# way to selectively update the file.

# Note: we can also use register with with_items to cut down on repetition
# here. See
# http://docs.ansible.com/playbooks_loops.html#using-register-with-a-loop

- name: Generate 32-byte value for "source secret key".
  shell: "head -c 32 /dev/urandom | base64"
  register: source_secret_key
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Add 32-byte value for "source secret key" to config.py.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "source_secret_key"
    line: "    SECRET_KEY = '{{ source_secret_key.stdout}}'"
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Generate 32-byte value for "journalist secret key".
  shell: "head -c 32 /dev/urandom | base64"
  register: journalist_secret_key
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Add 32-byte value for "journalist secret key" to config.py.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "journalist_secret_key"
    line: "    SECRET_KEY = '{{ journalist_secret_key.stdout }}'"
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Generate 32-byte value for "scrypt id pepper".
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_id_pepper
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Add 32-byte value for "scrypt id pepper" to config.py.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "scrypt_id_pepper"
    line: "SCRYPT_ID_PEPPER = '{{ scrypt_id_pepper.stdout }}'"
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Generate 32-byte value for "scrypt gpg pepper".
  shell: "head -c 32 /dev/urandom | base64"
  register: scrypt_gpg_pepper
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Add 32-byte value for "scrypt gpg pepper" to config.py.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "scrypt_gpg_pepper"
    line: "SCRYPT_GPG_PEPPER = '{{ scrypt_gpg_pepper.stdout }}'"
  when: not config.stat.exists
  tags:
    - securedrop_config

- name: Declare Application GPG fingerprint in config.py.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    regexp: "^JOURNALIST_KEY = "
    line: "JOURNALIST_KEY = '{{ securedrop_app_gpg_fingerprint }}'"
  tags:
    - gpg
    - securedrop_config

- name: Check whether sqlite database exists.
  stat:
    path: "{{ securedrop_data }}/db.sqlite"
  register: db
  # Read-only task, so don't report changed.
  changed_when: false
  tags:
    - database
    - securedrop_config

- name: Initialize sqlite database.
  shell: >
    su -s /bin/bash -c
    "PYTHONPATH={{ securedrop_code }}
    python -c 'import db; db.init_db()'"
    {{ securedrop_user }}
  when: not db.stat.exists
  tags:
    - database
    - securedrop_config

  # If a custom header image is specified in site-specific vars,
  # overwrite the default SecureDrop logo file. During upgrades
  # to securedrop-app-code, dpkg will not overwrite the custom logo.
  # The apache2 apparmor profile that ships with securedrop-app-code
  # allows reading this specific filepath, so the custom logo must reside here.
- name: Set custom logo file for Source Interface.
  copy:
    src: "{{ securedrop_header_image }}"
    dest: "{{ securedrop_code }}/static/i/logo.png"
    owner: "{{ securedrop_user }}"
    group: "{{ securedrop_user }}"
    mode: "0400"
    backup: yes
  when: securedrop_header_image is defined and
        securedrop_header_image != ""
  tags:
    - logo
    - securedrop_config

- name: Add DEFAULT_LOCALE to config.py if missing.
  lineinfile:
    dest: "{{ securedrop_code }}/config.py"
    line: "DEFAULT_LOCALE = '{{ securedrop_default_locale }}'"
    regexp: "^DEFAULT_LOCALE"
  when: db.stat.exists
  tags:
    - securedrop_config

- name: Update SUPPORTED_LOCALES in config.py
  blockinfile:
    content: "SUPPORTED_LOCALES = {{ securedrop_supported_locales + ['en_US'] }}"
    path: "{{ securedrop_code }}/config.py"
    marker: "# {mark} subset of the available locales that will be proposed to the user"
  when: securedrop_supported_locales is defined
  tags:
    - securedrop_config
