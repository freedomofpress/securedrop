---
- name: Gather logs for forensics from SecureDrop application server.
  hosts: securedrop
  become: yes
  max_fail_percentage: 0
  any_errors_fatal: yes
  environment:
    LC_ALL: C
  vars:
    log_paths_reference:
      app:
        - '/var/log/apt' # dir
        - '/var/log/cron-apt' # dir
        - '/var/log/aptitude*'
        - '/tmp/generated-logs' # dir
      mon:
        - '/var/log/apt' # dir
        - '/var/log/cron-apt' # dir
        - '/var/log/aptitude*'
        # syscheck contains the file integrity checking data store
        - '/var/ossec/queue/syscheck'
        - '/var/ossec/queue/rootcheck'
        # OSSEC alerts archives
        - '/var/ossec/logs'
        - '/tmp/generated-logs' # dir
    fpf_support_gpg_fingerprint: "734F6E707434ECA6C007E1AE82BD6C9616DABB79"

  tasks:
    - name: Set tarball filename.
      set_fact:
        log_tarball_filename: "securedrop-logs-{{ inventory_hostname }}-{{ ansible_date_time.iso8601_basic_short }}.tar.gz"

    - name: Clean directory for generated logs from previous runs
      file:
        path: /tmp/generated-logs
        state: absent

    - name: Create directory for generated logs
      file:
        path: /tmp/generated-logs
        state: directory
        mode: 0700
        owner: root
        group: root

    - name: Generate additional log files
      shell: |
        set -e
        apt list --installed > /tmp/generated-logs/installed-packages.txt

    - name: Set logfiles to collect.
      set_fact:
        # Only "app" and "mon" are supported hostnames in dynamic inventory as of 0.4.
        log_paths: "{{ log_paths_reference[inventory_hostname] }}"

    - name: Create tar archive.
      archive:
        path: "{{ log_paths }}"
        dest: "{{ log_tarball_filename }}"

    - name: Fetch tarball back to Admin Workstation.
      fetch:
        flat: yes
        fail_on_missing: yes
        src: "{{ log_tarball_filename }}"
        dest: "{{ playbook_dir }}/{{ log_tarball_filename }}"

    - name: Delete tarball from server admin home directory.
      file:
        path: "{{ log_tarball_filename }}"
        state: absent

    - name: Clean directory for generated logs to save disk space
      file:
        path: /tmp/generated-logs
        state: absent

    - name: Fetch FPF GPG key.
      become: no
      local_action: >-
        command
        gpg --keyserver hkps://keys.openpgp.org --recv-key "{{ fpf_support_gpg_fingerprint }}"
      register: fpf_gpg_key_fetch_result
      changed_when: "'imported: 1' in fpf_gpg_key_fetch_result.stderr"
      run_once: yes

    - name: Encrypt logs to FPF GPG key.
      become: no
      local_action: >-
        shell
        gpg --encrypt --recipient "{{ fpf_support_gpg_fingerprint }}"
        --output "{{ log_tarball_filename }}.gpg"
        --trust-model always
        --batch --yes
        "{{ log_tarball_filename }}"
      environment:
        GNUPG_HOME: /home/amensia/.gnupg

    - name: Delete local unencrypted log tarballs.
      become: no
      local_action:
        module: file
        path: "{{ log_tarball_filename }}"
        state: absent

    - name: Display filenames of local log tarballs.
      debug:
        msg: >-
          Logs copied successfully, find them at {{ (playbook_dir +'/'+ log_tarball_filename )|realpath }}.gpg .
