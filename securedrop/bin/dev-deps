#!/bin/bash

export DISPLAY=:1

export REPOROOT="${REPOROOT:-$(git rev-parse --show-toplevel)}"

function run_tor {
    tor > /tmp/tor.out 2>&1 || cat /tmp/tor.out
}

function run_xvfb() {
    (setsid Xvfb :1 -screen 0 1024x768x24 -ac +extension GLX +render -noreset >& /tmp/xvfb.out || cat /tmp/xvfb.out) &

    # give it time to start
    for _ in {1..10}
    do
        xdpyinfo -display :1 >/dev/null 2>&1 && return 0
        sleep 1
    done
    xdpyinfo -display :1 >/dev/null 2>&1 || (echo "Xvfb is not available"; exit 1)
}

function run_redis() {
    rm -f "${REPOROOT}/securedrop/dump.rdb"
    setsid redis-server >& /tmp/redis.out || cat /tmp/redis.out
}

function setup_vncauth {
    x11vnc -storepasswd freedom /tmp/vncpasswd
}

function run_x11vnc() {
    setsid x11vnc -display :1 -geometry 1024x768 -rfbauth /tmp/vncpasswd -rfbport 5909 -shared >& /tmp/x11vnc.out || cat /tmp/x11vnc.out
}

function urandom() {
    sudo rm /dev/random ||:
    sudo ln -s /dev/urandom /dev/random || echo "Unable to replace /dev/random"
}

function append_to_exit() {
    local existing
    existing="$(trap | sed -n "/EXIT\$/s/^trap -- '\(.*\)' EXIT/\1/p")"
    trap "${existing:-true} ; $1" EXIT
}

function maybe_create_config_py() {
    if ! test -f "${REPOROOT}/securedrop/config.py" ; then
        append_to_exit "rm ${REPOROOT}/securedrop/config.py"
        (cd "$REPOROOT" && make test-config)
    fi
}

function maybe_use_tor() {
    if [[ -n "${USE_TOR:-}" ]]; then
        echo "Setting up Arti..."

        mkdir -p /var/lib/arti
        if [ ! -f "/var/lib/arti/config.toml" ]; then
            # create config.toml for SI and JI
            openssl genpkey -algorithm x25519 -out /var/lib/arti/ji_priv.key
            ji_auth_public=$(openssl pkey -in /var/lib/arti/ji_priv.key -pubout | grep -v " PUBLIC KEY" | base64pem -d | tail --bytes=32 | base32 | sed 's/=//g')
            cat > /var/lib/arti/config.toml << TOML
[proxy]
socks_listen = 9152

[storage]
# store temporarily
cache_dir = "/tmp/arti-cache"
# store persistently
state_dir = "/var/lib/arti/data"

[onion_services."source"]
proxy_ports = [
    ["80", "127.0.0.1:8080"]
]

[onion_services."journalist"]
proxy_ports = [
    ["80", "127.0.0.1:8081"]
]
[onion_services."journalist".restricted_discovery]
enabled = true
[onion_services."journalist".restricted_discovery.static_keys]
journalist = "descriptor:x25519:${ji_auth_public}"

TOML
        fi
        /opt/cargo/bin/arti -c /var/lib/arti/config.toml hss --nickname source onion-name -l none > /var/lib/securedrop/source_v3_url
        /opt/cargo/bin/arti -c /var/lib/arti/config.toml proxy &
        # print out the addresses and the JI client auth key

        si_address="$(/opt/cargo/bin/arti -c /var/lib/arti/config.toml hss --nickname source onion-name -l none)"
        ji_address="$(/opt/cargo/bin/arti -c /var/lib/arti/config.toml hss --nickname journalist onion-name -l none)"
        ji_auth_private=$(grep -v " PRIVATE KEY" /var/lib/arti/ji_priv.key | base64pem -d | tail --bytes=32 | base32 | sed 's/=//g')
        sdkey_fpr="$(gpg --with-fingerprint --with-colons ./tests/files/test_journalist_key.pub | grep -e '^fpr' | tr -d 'fpr:')"

        cat > /tmp/qubes-config.json <<EOF
{
  "submission_key_fpr": "${sdkey_fpr}",
  "hidserv": {
    "hostname": "${ji_address}",
    "key": "${ji_auth_private}"
  },
  "environment": "prod",
  "vmsizes": {
     "sd_app": 10,
     "sd_log": 5
  }
}
EOF
        echo
        echo "Tor configuration complete! details as follows:"
        echo "--------"
        echo "Source Interface:     http://${si_address}"
        echo "Journalist Interface: http://${ji_address}"
        echo "Journalist Auth Key:  ${ji_auth_private}"
        echo "--------"
        echo
        echo "SecureDrop Workstation config.json:"
        echo "--------"
        cat /tmp/qubes-config.json
        echo "--------"
    fi
}

function reset_demo() {
    # Set up GPG keys directory structure.
    sudo mkdir -p /var/lib/securedrop/{store,keys,tmp}
    sudo chown -R "$(id -u)" /var/lib/securedrop
    cp ./tests/files/test_journalist_key.pub /var/lib/securedrop/journalist.pub
    gpg2 --homedir /var/lib/securedrop/keys --import /var/lib/securedrop/journalist.pub >& /tmp/gpg.out || cat /tmp/gpg.out

    # Create gpg-agent.conf
    echo allow-loopback-pinentry > /var/lib/securedrop/keys/gpg-agent.conf
    echo 'default-cache-ttl 0' >> /var/lib/securedrop/keys/gpg-agent.conf

    # Kill gpg-agent(s) if they exist so it picks up the new config on restart.
    pkill -f gpg-agent || true
    # Note that we should avoid `gpgconf --kill gpg-agent` since the pkill command will
    # handle killing multiple gpg-agent processes if they exist (this is what we want).

    # Set permissions on GPG-related directories/files.
    sudo chown -R "$(id -gn)" /var/lib/securedrop/keys
    chmod 700 /var/lib/securedrop/keys
    chmod 600 /var/lib/securedrop/keys/*

    # If the following directories exist, make sure they have the proper permissions.
    chmod -f 700 /var/lib/securedrop/keys/private-keys-v1.d || true
    chmod -f 700 /var/lib/securedrop/keys/openpgp-revocs.d || true

    # Compile translated strings
    pybabel compile --directory translations/

    # remove previously uploaded custom logos
    rm -f /var/www/securedrop/static/i/custom_logo.png

    # create an empty database
    sqlite3 /var/lib/securedrop/db.sqlite .databases &> /dev/null

    ./manage.py reset

    gpg2 --homedir /var/lib/securedrop/keys --no-default-keyring --keyring /var/lib/securedrop/keys/pubring.gpg --import /var/lib/securedrop/journalist.pub

    # Can't pass an array environment variable with "docker --env", so
    # break up the string we can pass.
    if [ -n "${LOADDATA_ARGS:-""}" ]
    then
        IFS=" " read -r -a loaddata_arg_array <<< "${LOADDATA_ARGS}"
        ./loaddata.py "${loaddata_arg_array[@]}"
    else
        ./loaddata.py
    fi
}

function build_redwood() {
    # For the demo, we build the wheel at container build time instead of
    # during launch, so skip this part
    if [[ -z "${SKIP_REDWOOD_BUILD:-}" ]]; then
        # Create a debug build of redwood and install it in the app-code virtualenv
        # TODO: add live reload support
        # We tell cargo to put its registry/crate cache and build cache in the target/ folder so
        # it persists instead of being recreated from scratch each time the container starts.
        # n.b. we can't re-use the host's caches because of permission differences
        PATH="$PATH:/opt/cargo/bin/" \
        CARGO_HOME="${REPOROOT}/target/cargo-dev" \
            python3 "${REPOROOT}/redwood/build-wheel.py" --redwood "${REPOROOT}/redwood" --target "${REPOROOT}/target/dev"
        /opt/venvs/securedrop-app-code/bin/pip install "${REPOROOT}"/redwood/redwood-*.whl
    fi
}
