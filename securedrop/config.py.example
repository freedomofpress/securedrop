import os

# Default values for production, may be overridden later based on environment
class FlaskConfig(object):
    DEBUG = False
    TESTING = False
    WTF_CSRF_ENABLED = True

# Use different secret keys for the two different applications so their
# sessions can't be confused.
# TODO consider using salts instead: http://pythonhosted.org//itsdangerous/#the-salt
class SourceInterfaceFlaskConfig(FlaskConfig):
    SECRET_KEY = '{{ source_secret_key.stdout }}'
    SESSION_COOKIE_NAME = "ss"

class JournalistInterfaceFlaskConfig(FlaskConfig):
    SECRET_KEY = '{{ journalist_secret_key.stdout }}'
    SESSION_COOKIE_NAME = "js"

# These files are in the same directory as config.py. Use absolute paths to
# avoid potential problems with the test runner - otherwise, you have to be in
# this directory when you run the code.
SECUREDROP_ROOT = os.path.dirname(os.path.realpath(__file__))

SOURCE_TEMPLATES_DIR = os.path.join(SECUREDROP_ROOT, 'source_templates')
JOURNALIST_TEMPLATES_DIR = os.path.join(SECUREDROP_ROOT, 'journalist_templates')
WORD_LIST = os.path.join(SECUREDROP_ROOT, 'wordlist')
NOUNS = os.path.join(SECUREDROP_ROOT, 'dictionaries/nouns.txt')
ADJECTIVES = os.path.join(SECUREDROP_ROOT, './dictionaries/adjectives.txt')

WORKER_PIDFILE = "/tmp/securedrop_worker.pid"

# "head -c 32 /dev/urandom | base64" for constructing public ID from source codename
SCRYPT_ID_PEPPER = '{{ scrypt_id_pepper.stdout }}'
# "head -c 32 /dev/urandom | base64" for stretching source codename into GPG passphrase
SCRYPT_GPG_PEPPER = '{{ scrypt_gpg_pepper.stdout }}'
SCRYPT_PARAMS = dict(N=2**14, r=8, p=1)

# Fingerprint of the public key to use for encrypting submissions
# Defaults to test_journalist_key.pub, which is used for development and testing
JOURNALIST_KEY = '{{ securedrop_app_gpg_fingerprint }}'

# Directory where SecureDrop stores the database file, GPG keyring, and
# encrypted submissions.
SECUREDROP_DATA_ROOT = '/var/lib/securedrop'

# Modify configuration for alternative environments
env = os.environ.get('SECUREDROP_ENV') or 'prod'

if env == 'prod':
    # This is recommended for performance, and also resolves #369
    FlaskConfig.USE_X_SENDFILE = True
elif env == 'dev':
    # Enable Flask's debugger for development
    FlaskConfig.DEBUG = True
    # Use MAX_CONTENT_LENGTH to mimic the behavior of Apache's LimitRequestBody
    # in the development environment. See #1714.
    FlaskConfig.MAX_CONTENT_LENGTH = 524288000
elif env == 'test':
    FlaskConfig.TESTING = True
    # Disable CSRF checks to make writing tests easier
    FlaskConfig.WTF_CSRF_ENABLED = False
    # TODO use a unique temporary directory for each test so we can parallelize them
    SECUREDROP_DATA_ROOT = '/tmp/securedrop'

# The following configuration is dependent on SECUREDROP_DATA_ROOT

# Directory where encrypted submissions are stored
STORE_DIR=os.path.join(SECUREDROP_DATA_ROOT, 'store')

# Directory where GPG keyring is stored
GPG_KEY_DIR=os.path.join(SECUREDROP_DATA_ROOT, 'keys')

# Directory for temporary files
# We use a directory under the SECUREDROP_DATA_ROOT instead of `/tmp` because
# we need to expose this directory via X-Send-File, and want to minimize the
# potential for exposing unintended files.
TEMP_DIR = os.path.join(SECUREDROP_DATA_ROOT, "tmp")

# Database configuration
# TODO we currently use sqlite in production since it is sufficient and simple,
# but in the future may want to be able to choose a different database
# depending on the environment
DATABASE_ENGINE = 'sqlite'
DATABASE_FILE = os.path.join(SECUREDROP_DATA_ROOT, 'db.sqlite')

# Which of the available locales should be displayed by default ?
DEFAULT_LOCALE = 'en_US'

# How long a session is valid before it expires and logs a user out
SESSION_EXPIRATION_MINUTES = 120
