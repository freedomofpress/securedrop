#!/bin/bash
# postinst script for securedrop-app-code
#
# see: dh_installdeb(1)
set -e
set -x
set -o pipefail
# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

SDVE="/opt/venvs/securedrop-app-code"
SDBIN="${SDVE}/bin"

database_migration() {
    database_dir='/var/lib/securedrop'
    database_file="$database_dir/db.sqlite"

    # Ensure the database exists.
    if [ ! -e "$database_file" ]; then
        old_umask=$(umask)
        umask 0027 # to get os 0640 permissions from the sqlite command

        # Future-proof way to create an empty database.
        sqlite3 "$database_file" '.databases'
        umask "$old_umask"
        chown www-data:www-data "$database_file"
    fi

    cd '/var/www/securedrop/'

    # `alembic current` outputs nothing if the DB isn't under version control.
    if [ -z "$(sudo -u www-data ${SDBIN}/alembic current)" ]; then
        sqlite_tables=$(sqlite3 "$database_file" .tables)

        if ! echo "$sqlite_tables" | grep -q journalists; then
            # This is a fresh install, run the full migrations.
            sudo -u www-data ${SDBIN}/alembic upgrade head
        else
            # This is an old install, so mark that the schema is up to date
            # as of the version of migration 15ac9509fc68_init.py when we first
            # started version controlling the database.
            sudo -u www-data ${SDBIN}/alembic stamp 15ac9509fc68
        fi
    fi

    db_backup="/var/lib/securedrop/backups/$(date +%Y-%m-%d-%H-%M-%S)-db.sqlite"

    if ! sudo -u www-data ${SDBIN}/alembic current | grep -q '(head)'; then
        sudo -u www-data cp /var/lib/securedrop/db.sqlite "$db_backup"
    fi

    if sudo -u www-data ${SDBIN}/alembic upgrade head; then
        sudo -u www-data rm -f "$db_backup"
    else
        echo "Error migrating database: Backup saved to $db_backup" >&2
        return 1
    fi
}

adjust_wsgi_configuration() {
    journalist_conf="/etc/apache2/sites-available/journalist.conf"
    if test -f $journalist_conf; then
        # Supports passing authorization headers for the SecureDrop API.
        # Only affects the Journalist Interface. Required for unattended upgrade
        # to v0.9.0.
        #
        # First we check whether the line is present.
        # Next we find a target line to anchor the insertion.
        # Then we insert the line, along with the target line that was matched.
        if ! grep -qP '^WSGIPassAuthorization' "$journalist_conf"; then
            perl -pi -e 's/^(WSGIScriptAlias .*)/$1\nWSGIPassAuthorization On/' "$journalist_conf"
        fi

        # Add process-group and application-group to WSGIScriptAlias
        # to ensure the application is initialized at process start
        # instead of waiting for the first request. (See
        # https://modwsgi.readthedocs.io/en/latest/configuration-directives/WSGIScriptAlias.html)
        if grep -qP '^WSGIScriptAlias / /var/www/journalist.wsgi$' "$journalist_conf"; then
            perl -pi -e 's/^(WSGIScriptAlias .*)/$1 process-group=journalist application-group=journalist/' "$journalist_conf"
        fi

        # Remove the WSGIProcessGroup directive; it's not needed if
        # specified in WSGIScriptAlias.
        if grep -qP '^WSGIProcessGroup journalist' "$journalist_conf"; then
            perl -pi -e 's/^WSGIProcessGroup journalist.*\n//' "$journalist_conf"
        fi
    fi
}

migrate_crontab() {
    # Clear any old crontab entries
    crontab -u root -r ||:
    crontab -u www-data -r ||:
}

#
#
refresh_bytecode() {
    # Now generate the new byte-code
    py3compile "${SDVE}"
    py3compile /var/www/securedrop

}

#
# Modify existing instance to use only TLS1.3 for the source.
update_to_tls13(){
    source_conf="/etc/apache2/sites-available/source.conf"
    if grep -qP '^SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1$' "$source_conf"; then
        sed -i '/^SSLProtocol all/c\SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2' "$source_conf"
        sed -i '/^SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384/d' "$source_conf"
        sed -i '/^SSLHonorCipherOrder on/c\SSLHonorCipherOrder off' "$source_conf"
        sed -i '/^SSLCompression off/ a \\SSLSessionTickets off' "$source_conf"
    fi
}

#
# Q4-2021 Apache2 header updates:
update_apache2_headers(){

    if [ ! -e "$1" ]; then
        echo "Apache vhost '$1' does not exist, skipping header changes..." >&2
        return
    fi

    # update CSP header, adding frame-ancestors (see #6178)
    if grep -qP "^Header always set Content-Security-Policy \"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\"" "$1"; then
        sed -i "/^Header always set Content-Security-Policy \"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\"/c\Header always set Content-Security-Policy \"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; frame-ancestors 'none';\"" "$1"
    fi

    # remove X-XSS-Protection block if it exists (see #6182)
    if grep -qP "^Header onsuccess unset X-XSS-Protection" "$1"; then
        sed -i '/^Header onsuccess unset X-XSS-Protection/d' "$1"
        sed -i '/^Header always set X-XSS-Protection "1; mode=block"/d' "$1"
    fi

    # remove X-Download-Only block if it exists (see #6180)
    if grep -qP "^Header onsuccess unset X-Download-Options" "$1"; then
        sed -i '/^Header onsuccess unset X-Download-Options/d' "$1"
        sed -i '/^Header always set X-Download-Options "noopen"/d' "$1"
    fi

    # Add Cross-Origin headers if not present (see #6176)
        if ! grep -qP '^Header onsuccess unset Cross-Origin-Opener-Policy' "$1"; then
            sed -i '/^Header always set Referrer-Policy .*/a Header onsuccess unset Cross-Origin-Opener-Policy\nHeader always set Cross-Origin-Opener-Policy "same-origin"' "$1"
        fi
        if ! grep -qP '^Header onsuccess unset Cross-Origin-Embedder-Policy' "$1"; then
            sed -i '/^Header always set Cross-Origin-Opener-Policy .*/a Header onsuccess unset Cross-Origin-Embedder-Policy\nHeader always set Cross-Origin-Embedder-Policy "same-origin"' "$1"
        fi
        if ! grep -qP '^Header onsuccess unset Cross-Origin-Resource-Policy' "$1"; then
            sed -i '/^Header always set Cross-Origin-Embedder-Policy .*/a Header onsuccess unset Cross-Origin-Resource-Policy\nHeader always set Cross-Origin-Resource-Policy "same-origin"' "$1"
        fi

    # Update Cross-Origin-Resource-Policy header if already present (see #6768)
    sed -i 's/^Header always set Cross-Origin-Resource-Policy "same-site"/Header always set Cross-Origin-Resource-Policy "same-origin"/g' "$1"
}

# Export the journalist public key out of the GPG keyring to journalist.pub
# as part of the GPG -> Sequoia migration.
export_journalist_public_key() {
    # config.py is root-writable, so it's safe to run it as root to extract the fingerprint
    journalist_pub="/var/lib/securedrop/journalist.pub"
    # If the journalist.pub file doesn't exist
    if ! test -f $journalist_pub; then
        # And we have a config.py (during initial install it won't exist yet)
        if test -f /var/www/securedrop/config.py; then
            # n.b. based on sdconfig.py, this should work with very old config.py files.
            fingerprint=$(cd /var/www/securedrop; python3 -c "import config; print(config.JOURNALIST_KEY)")
            # Set up journalist.pub as root/www-data 640 before writing to it.
            touch $journalist_pub
            chown root:www-data $journalist_pub
            chmod 640 $journalist_pub
            # Export the GPG public key
            # shellcheck disable=SC2024
            sudo -u www-data gpg2 --homedir=/var/lib/securedrop/keys --export --armor "$fingerprint" > $journalist_pub
            # We explicitly do not validate the exported key here, that is done during JI startup
        fi
    fi

}

# Password-protect access to Redis
set_redis_password() {
    # Only run when upgrading, which means config.py exists and rq_config.py does not.
    if ! test -f "/var/www/securedrop/rq_config.py" && test -f "/var/www/securedrop/config.py"; then
        password=$(head -c 32 /dev/urandom | base64)
        echo "requirepass $password" | sudo -u redis tee -a /etc/redis/redis.conf
        # Set in config.py for web apps
        echo "REDIS_PASSWORD = \"$password\"" >> /var/www/securedrop/config.py
        # Create separate rq_config for rqworker
        touch /var/www/securedrop/rq_config.py
        chown root:www-data /var/www/securedrop/rq_config.py
        chmod 640 /var/www/securedrop/rq_config.py
        echo "REDIS_PASSWORD = \"$password\"" > /var/www/securedrop/rq_config.py
        service redis-server restart
    fi
}

case "$1" in
    configure)

    # Ensure SecureDrop's necessary directories are created
    for dir in /var/lib/securedrop/{,tmp,shredder,store,keys,/keys/private-keys-v1.d,/keys/openpgp-revocs.d,backups}; do
      mkdir -p "$dir"
      chmod 0700 "$dir"
    done

    chown -R www-data:www-data /var/lib/securedrop

    # Ensure required gpg-agent.conf is in place, see #4013.
    if [ -e "/var/lib/securedrop/keys/gpg-agent.conf" ]; then

        # gpg-agent.conf does exist, update it if needed.
        if ! grep -qE '^allow-loopback-pinentry$' /var/lib/securedrop/keys/gpg-agent.conf; then
            echo allow-loopback-pinentry | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf
        fi
        if ! grep -qE '^default-cache-ttl 0$' /var/lib/securedrop/keys/gpg-agent.conf; then
            echo 'default-cache-ttl 0' | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf
        fi

    else
        # gpg-agent.conf does not yet exist, create it.
        echo allow-loopback-pinentry | sudo -u www-data tee /var/lib/securedrop/keys/gpg-agent.conf
        echo 'default-cache-ttl 0' | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf
    fi

    # Migrate private keyring to gpg2.1 if needed
    if [ ! -d "/var/lib/securedrop/keys/private-keys-v1.d" ]; then
        # Then we should migrate the keyring
        # shellcheck disable=SC2024
        sudo -u www-data gpg2 --homedir=/var/lib/securedrop/keys --batch --import < /var/lib/securedrop/keys/secring.gpg
    fi

    migrate_crontab

    # /var/www/securedrop should be owned by root and world-readable.
    # Permissions on specific files will be loosened after
    chown -R root:root /var/www/securedrop
    chmod 755 /var/www/securedrop

    # Make sure config.py and rq_config.py are owned by root and readable by www-data,
    # but not world-readable
    if [ -f "/var/www/securedrop/config.py" ]; then
        chown root:www-data /var/www/securedrop/config.py
        chmod 640 /var/www/securedrop/config.py
    fi
    if [ -f "/var/www/securedrop/rq_config.py" ]; then
        chown root:www-data /var/www/securedrop/rq_config.py
        chmod 640 /var/www/securedrop/rq_config.py
    fi
    # And logo needs to be writable by webserver user
    # If there's no custom logo yet, copy the default in its place
    if [ ! -f "/var/www/securedrop/static/i/custom_logo.png" ]; then
        cp /var/www/securedrop/static/i/logo.png /var/www/securedrop/static/i/custom_logo.png
    fi
    chown www-data:www-data /var/www/securedrop/static/i/custom_logo.png

    # No Python code should be executed before this
    refresh_bytecode

    # Apache's default sites are not allowed by the securedrop apparmor profile
    # disable the site before putting the apache apparmor profile in enforce
    # mode.
    a2dissite 000-default
    a2dissite default-ssl
    # Stop Apache service while we make changes. This is primarily for
    # AppArmor (if the Apache service is running unconfined, and the profile is
    # set to "enforce", then apache2 will fail to restart, since it lacks
    # the ability to send signals to unconfined peers), but also prevents any
    # web traffic while database updates are applied.
    service apache2 stop

    # and make sure it's enabled
    a2enmod wsgi

    # If the profile was disabled enabled it.
    if [ -e "/etc/apparmor.d/disable/usr.sbin.apache2" ]; then
        rm /etc/apparmor.d/disable/usr.sbin.apache2
    fi

    aa-enforce /etc/apparmor.d/usr.sbin.tor
    aa-enforce /etc/apparmor.d/usr.sbin.apache2

    # Munge Apache config while service is stopped.
    adjust_wsgi_configuration

    # Add TLS1.3 configuration to the source configuration if required
    update_to_tls13

    # Apply Q4-2021 header updates
    update_apache2_headers /etc/apache2/sites-available/source.conf
    update_apache2_headers /etc/apache2/sites-available/journalist.conf

    # remove previously dynamically-generated assets
    rm -fr /var/www/securedrop/static/gen/
    rm -fr /var/www/securedrop/static/.webassets-cache/

    # GPG -> Sequoia migration
    export_journalist_public_key

    # Set redis password
    set_redis_password

    # Version migrations
    database_migration

    # Restart apache now that we've updated everything, setup AppArmor
    # and applied all migrations
    service apache2 restart

    ;;

    abort-upgrade|abort-remove|abort-deconfigure|triggered)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
