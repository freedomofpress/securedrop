---
- name: Create remote CI hosts on AWS.
  ec2:
    group_id: "{{ aws_ec2_sg_id }}"
    vpc_subnet_id: "{{ aws_ec2_subnet_id }}"
    assign_public_ip: "{{ aws_ec2_public_ip }}"
    image: "{{ aws_ec2_ami }}"
    region: "{{ aws_ec2_ci_region }}"
    key_name: "sdci-{{ job_id }}"
    exact_count: 1
    instance_type: "{{ aws_ec2_instance_type }}"
    instance_initiated_shutdown_behavior: terminate
    wait: True
    user_data: "{{ aws_ec2_ci_userdata }}"
    volumes:
      - device_name: /dev/xvda
        volume_type: gp2
        volume_size: 15
        delete_on_termination: True
    instance_tags: "{{ aws_ec2_ci_tags | combine({'server_type': item.name}) }}"
    count_tag: "{{ aws_ec2_ci_tags | combine({'server_type': item.name}) }}"
    instance_profile_name: "{{ aws_ec2_ci_profile_name }}"
  register: reg_ec_instance
  with_items: "{{ molecule_yml.platforms }}"

- name: Establish private facts
  set_fact:
    aws_instance_dns: "{{ 'public_dns_name' if aws_ec2_public_ip else 'private_dns_name' }}"
    aws_instance_ip:  "{{ 'public_ip' if aws_ec2_public_ip else 'private_ip' }}"

- block:
    - name: Wait for EC2 instances to boot.
      wait_for:
        host: "{{ item.tagged_instances[0][aws_instance_dns] }}"
        port: 22
        timeout: 180
        search_regex: OpenSSH
        delay: 10
        state: started
      register: ec2_launch_results
      with_items: "{{ reg_ec_instance.results }}"
      when: "item.tagged_instances[0].tags['build_num'] == aws_ec2_ci_tags.build_num"
  rescue:
    - name: Destroy EC2 instances (for relaunch)
      ec2:
        region: "{{ aws_ec2_ci_region }}"
        instance_ids: ["{{ item.item.tagged_instances[0].id }}"]
        state: absent
      notify: aws relaunch
      when: item|failed
      with_items: "{{ ec2_launch_results.results }}"

    - name: Flush handlers to re-run AWS logic
      meta: flush_handlers
  always:
    - name: Populate instance config dict
      set_fact:
        instance_conf: "{{ instance_conf|default([]) + [{
          'instance': item.tags.server_type,
          'instance_id': item.id,
          'address': item[aws_instance_ip],
          'priv_address': item.private_ip,
          'user': 'sdrop',
          'port': '22',
          'hostname': item[aws_instance_dns],
          'identity_file': molecule_ephemeral_directory+'/'+job_id }] }}"
      with_items: "{{ reg_ec_instance.results|map(attribute='tagged_instances')|list }}"
      register: instance_config_dict

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_nice_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"

    - name: Add AWS hosts to ephermeral ssh-config (needed for testinfra)
      template:
        dest: "{{ molecule_ephemeral_directory }}/{{ job_id }}-config"
        src: ssh_config
        mode: 0600

    - name: Add arbitrary sleep to give cloud-init some time
      wait_for:
        timeout: 60
