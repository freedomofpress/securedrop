#!/usr/bin/env ansible-playbook
---
- name: Reboot and wait
  hosts: securedrop
  become: yes
  tasks:
    - include: reboot_and_wait.yml
    - include: tor_apt_test.yml
      when: (lookup('env','CIRCLE_BRANCH')|default('na')).startswith('release')
  handlers:
    - name: update tor
      apt:
        name: tor
        state: latest
        update_cache: yes

- name: Setup junit env first
  hosts: localhost
  gather_facts: false
  become: no
  tasks:
    - name: Ensure test folder(s) exists
      file:
        state: directory
        path: "../../{{ item }}"
      with_items:
        - junit
        - raw-test-output

    - name: Dig out existing junit test results
      find:
        paths: "{{ (playbook_dir+'/../../junit')|realpath }}"
        patterns: "*.xml"
      register: find_junit_results

    - name: Ensure existing junit files are purged
      file:
        state: absent
        path: "{{ item.path }}"
      with_items: "{{ find_junit_results.files }}"

- name: Run application test suite in CI.
  hosts: "app-{{ ci_env }}"
  become: yes
  gather_facts: false
  tasks:

    - name: Run application tests
      script: scripts/app-tests.sh "{{ app_dir[ci_env] }}"
      register: app_test_register
      ignore_errors: true

      # The test results file will be posted as an artifact for the CI run,
      # so developers can download it and inspect it in detail.
    - name: Fetch JUnit test results XML file.
      fetch:
        src: /tmp/apptest.xml
        dest: ../../apptest-results.xml
        flat: yes

    - name: Run testinfra tests
      command: "{{ molecule_scenario_directory }}/scripts/ci-tester.sh"
      args:
        chdir: ../../
      environment:
        MON_IP: "{{ molecule_instance_config_yml | selectattr('instance','match','^mon') | map(attribute='priv_address')|first }}"
        APP_IP: "{{ molecule_instance_config_yml | selectattr('instance','match','^app') | map(attribute='priv_address')|first }}"
        CI_SSH_CONFIG: "{{ molecule_instance_config_yml[0].identity_file }}-config"
      register: testinfra_results
      delegate_to: localhost
      become: no
      ignore_errors: true

    - name: Establish list of raw test results
      set_fact:
        raw_test_results:
          - type: app
            file: scripts/app-tests.sh
            result: "{{ app_test_register }}"
          - type: testinfra
            file: scripts/ci-tester.sh
            result: "{{ testinfra_results }}"

    - name: Dump raw test output
      copy:
        dest: "../../raw-test-output/{{item.type}}_tests.raw"
        content: "{{ item.result }}"
      with_items: "{{ raw_test_results }}"
      become: no
      delegate_to: localhost

    - name: Dump results into junit files
      template:
        src: junit.xml.j2
        dest: "../../{{ item.type }}-results.xml"
      with_items: "{{ raw_test_results }}"
      become: no
      # THIS NEEDS TO BE SKIPPED FOR THE TIME BEING.
      # CAUSING PARSING FAILURES ON TEST COMBINE
      # See pull/2796
      when: false
      delegate_to: localhost

    - name: Combine tests for export
      shell: ./testinfra/combine-junit.py ./*results.xml > ./junit/junit.xml
      args:
        chdir: ../../
      delegate_to: localhost
      become: no

    - fail:
      when: app_test_register|failed or testinfra_results|failed
  vars:
    ci_env: "{{ lookup('env', 'CI_SD_ENV') }}"
    # We must define this var at the play-level since the group/host vars
    # won't automatically be included, since they're relative to the
    # provisioning playbooks (rather than the CI bootstrapping playbooks).
    app_dir:
      staging: /var/www/securedrop
    molecule_instance_config: "{{ lookup('env', 'MOLECULE_INSTANCE_CONFIG') }}"
    molecule_instance_config_yml: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
    molecule_scenario_directory: "{{ lookup('env', 'MOLECULE_SCENARIO_DIRECTORY') }}"
